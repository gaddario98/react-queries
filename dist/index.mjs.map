{"version":3,"file":"index.mjs","sources":["../../lib/endpoint.ts","../../lib/api.ts","../../lib/hooks.ts"],"sourcesContent":["let endpoints: Record<string, string> = {\n  custom: '',\n};\n\nconst setEndpoints = (data: Record<string, string>) => {\n  endpoints = { ...endpoints, ...data };\n};\n\ntype Endpoint = Record<string, string>;\nexport { endpoints, type Endpoint, setEndpoints };\n","import axios, { AxiosRequestConfig, AxiosResponse } from 'axios';\n\ntype ApiMethod = 'GET' | 'POST' | 'PUT' | 'DELETE';\ntype ApiConverter<TProps, TConverter> = (props: TProps) => TConverter;\n\n// Crea un'istanza di Axios\nconst apiClient = axios.create();\nconst url = '';\n\n// Aggiungi un interceptor di richiesta\napiClient.interceptors.request.use(\n  async (config) => {\n    config.baseURL = url;\n    return config;\n  },\n  async (error) => {\n    return await Promise.reject(error);\n  },\n);\n\napiClient.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    if (error.response) {\n      throw new Error(\n        error.response.data?.message ||\n          error.response.data?.error ||\n          `Error ${error.response.status}`,\n      );\n    } else if (error.request) {\n      throw new Error(\n        'No response from server - request timeout or network issue',\n      );\n    } else {\n      throw new Error('Request configuration error');\n    }\n  },\n);\n\nconst apiRequest = async <TProps, TResponse, TConverter = TProps>(\n  url: string,\n  method: ApiMethod,\n  body?: TProps,\n  headers?: AxiosRequestConfig['headers'],\n  converter?: ApiConverter<TProps, TConverter>,\n): Promise<TResponse> => {\n  try {\n    const data = converter && body ? converter(body) : body;\n    const response: AxiosResponse<TResponse & { error?: string }> =\n      await apiClient({\n        url,\n        method,\n        data,\n        headers,\n      });\n\n    if (response.status >= 200 && response.status < 300) {\n      return response.data;\n    }\n\n    throw new Error(response.data?.error ?? 'Error');\n  } catch (error) {\n    console.error('API Request Error:', error);\n    if (error instanceof Error) {\n      throw error;\n    }\n    throw new Error('Unknown error occurred');\n  }\n};\n\nconst fetchRequest = async <TProps, TResponse, TConverter = TProps>(\n  url: string,\n  headers?: AxiosRequestConfig['headers'],\n): Promise<TResponse> => {\n  return apiRequest<TProps, TResponse, TConverter>(url, 'GET', undefined, headers);\n};\n\nexport { fetchRequest, apiRequest };\nexport type { ApiMethod, ApiConverter };\n","import {\n  useMutation,\n  useQueries,\n  useQuery,\n  UseQueryResult,\n  queryClient,\n} from \"@gaddario98/react-providers\";\nimport { endpoints } from \"./endpoint\";\nimport { useCallback, useMemo } from \"react\";\nimport { apiRequest, fetchRequest } from \"./api\";\nimport {\n  QueryProps,\n  MultipleQueryResponse,\n  QueriesArray,\n  QueriesProps,\n  AllMutation,\n  MutationItem,\n  QueryItem,\n  ContextValue,\n  QueryConfigArray,\n} from \"./types\";\nimport { useNotification } from \"@gaddario98/react-notifications\";\nimport { useAuthValue } from \"@gaddario98/react-auth\";\n\nlet validateApi = () => {\n  return true;\n};\n\nexport const setValidateApi = (validate: () => boolean) => {\n  validateApi = validate;\n};\n\nexport const useQueryApi = <TGetProps, TGetResponse>(\n  props: Omit<QueryProps<string, TGetResponse>, \"keyToMap\">\n) => {\n  const {\n    enabled,\n    endpoint: endpointArr,\n    queryKey,\n    customQueryFn,\n    headers,\n    disableAuthControl,\n    onDataChanged,\n    options,\n  } = props;\n  const auth = useAuthValue();\n  const [key, path] = endpointArr;\n  const baseUrl = endpoints[key];\n  const fullEndpoint = [baseUrl, path].filter(Boolean).join(\"/\");\n  const queryResult = useQuery<TGetResponse>({\n    queryKey,\n    queryFn: async () => {\n      const res = await (customQueryFn?.() ??\n        fetchRequest<TGetProps, TGetResponse>(fullEndpoint, {\n          Authorization: auth?.token ? `Bearer ${auth?.token ?? \"\"}` : \"\",\n          ...headers,\n        }));\n      onDataChanged?.(res);\n      return res;\n    },\n    enabled:\n      !!options?.enabled ||\n      (!!enabled &&\n        (disableAuthControl || (!!auth?.isLogged && validateApi()))),\n    retry: 1,\n    retryDelay: 1000,\n    ...options,\n  });\n  //console.log(\"useQueryApi\", queryResult);\n  return queryResult;\n};\n\nexport const useMultipleQuery = <Q extends QueriesArray>(\n  settings: QueryProps<Q[number][\"key\"], Q[number][\"response\"]>[] = []\n) => {\n  const auth = useAuthValue();\n\n  const results = useQueries({\n    queries: useMemo(\n      () =>\n        settings.map(\n          ({\n            enabled,\n            endpoint: endpointArr,\n            queryKey,\n            customQueryFn,\n            headers,\n            disableAuthControl,\n            onDataChanged,\n            options,\n          }) => {\n            const [key, path] = endpointArr;\n            const baseUrl = endpoints[key];\n            const fullEndpoint = [baseUrl, path].filter(Boolean).join(\"/\");\n            return {\n              queryKey,\n              queryFn: async () => {\n                const res = await (customQueryFn?.() ??\n                  fetchRequest<Q[number][\"props\"], Q[number][\"response\"]>(\n                    fullEndpoint,\n                    {\n                      Authorization: auth?.token ? `Bearer ${auth.token}` : \"\",\n                      ...headers,\n                    }\n                  ));\n                onDataChanged?.(res);\n                return res;\n              },\n              enabled:\n                !!options?.enabled ||\n                (!!enabled &&\n                  (disableAuthControl || (!!auth?.isLogged && validateApi()))),\n              retry: 1,\n              retryDelay: 1000,\n              ...options,\n            } as Parameters<typeof useQuery>[0];\n          }\n        ),\n      [auth, settings]\n    ),\n    combine: useCallback(\n      (results: UseQueryResult<Q[number][\"response\"], Error>[]) =>\n        results.reduce<MultipleQueryResponse<Q>>((prev, result, index) => {\n          return {\n            ...prev,\n            [settings[index].keyToMap]: {\n              data: result.data as Q[number][\"response\"],\n              isLoadingMapped:\n                !settings[index]?.disableLoading && result.isLoading,\n              isLoading: result.isLoading,\n              isFetching: result.isFetching,\n              isPending: result.isPending,\n            },\n          };\n        }, {} as MultipleQueryResponse<Q>),\n      [settings]\n    ),\n  });\n\n  return results;\n};\n\nexport const useMutateApi = <TProps, TResponse, TConverter = null>({\n  endpoint,\n  queryKeyToInvalidate,\n  converter,\n  customRequest,\n  headers,\n  isTest,\n  mutateOptions,\n  method,\n  notification,\n}: QueriesProps<TProps, TResponse, TConverter>) => {\n  const { showNotification } = useNotification();\n  const auth = useAuthValue();\n\n  return useMutation<TResponse, Error, TProps>({\n    mutationFn: async (data) => {\n      if (isTest) {\n        return \"test\" as TResponse;\n      }\n      if (auth?.isLogged && !validateApi())\n        throw new Error(\"Utente non autenticato\");\n      return (customRequest ?? apiRequest<TProps, TResponse, TConverter>)(\n        `${endpoints[endpoint[0]]}/${endpoint?.[1] ?? \"\"}`,\n        method,\n        data,\n        {\n          Authorization: auth?.token ? `Bearer ${auth?.token ?? \"\"}` : \"\",\n          ...headers,\n        },\n        converter\n      );\n    },\n    ...(mutateOptions || {}),\n    onSuccess: (data: TResponse, variables: TProps, context: unknown) => {\n      mutateOptions?.onSuccess?.(data, variables, context);\n      queryKeyToInvalidate?.forEach((queryKey) => {\n        queryClient.invalidateQueries({ queryKey: [queryKey], exact: false });\n      });\n      const notificationProps =\n        typeof notification?.success === \"function\"\n          ? notification.success(data)\n          : notification?.success;\n      if (notificationProps?.message) {\n        showNotification({\n          message: notificationProps.message,\n          type: notificationProps?.type ?? \"success\",\n          ...notificationProps,\n        });\n      }\n    },\n    onError(error: Error, variables: TProps, context: unknown) {\n      mutateOptions?.onError?.(error, variables, context);\n      if (error?.message) {\n        const notificationProps =\n          typeof notification?.error === \"function\"\n            ? notification.error(error?.message ?? \"Error\")\n            : notification?.error;\n        showNotification({\n          message:\n            notificationProps?.message ??\n            error?.message ??\n            \"An unexpected error occurred\",\n          type: notificationProps?.type ?? \"error\",\n          ...notificationProps,\n        });\n      }\n    },\n  });\n};\n\nexport const useApi = <Q extends QueriesArray>(\n  configs: QueryConfigArray<Q>\n): ContextValue<Q> => {\n  // Filter and prepare query configurations\n  const queryItems = useMemo(\n    () => configs?.filter((q): q is QueryItem<Q> => q.type === \"query\"),\n    [configs]\n  );\n\n  const queryConfigs = useMemo(() => {\n    return queryItems\n      .map((item) =>\n        item.queryConfig ? { ...item.queryConfig, keyToMap: item.key } : null\n      )\n      .filter(Boolean) as QueryProps<Q[number][\"key\"], Q[number][\"response\"]>[];\n  }, [queryItems]);\n\n  // Execute all queries with a single hook\n  const queriesResult = useMultipleQuery<Q>(queryConfigs);\n\n  // Filter mutation configs\n  const mutationItems = useMemo(\n    () =>\n      configs?.filter(\n        (q): q is MutationItem<Q> => q.type === \"mutation\" && !!q.mutationConfig\n      ),\n    [configs]\n  );\n\n  // Define a default config for empty slots\n  const defaultMutationConfig = {\n    endpoint: [\"default\"],\n    method: \"POST\" as const,\n  };\n\n  // Create mutation hooks - each must be declared separately to follow React's rules of hooks\n  const mutation1 = useMutateApi(\n    mutationItems[0]?.mutationConfig || defaultMutationConfig\n  );\n  const mutation2 = useMutateApi(\n    mutationItems[1]?.mutationConfig || defaultMutationConfig\n  );\n  const mutation3 = useMutateApi(\n    mutationItems[2]?.mutationConfig || defaultMutationConfig\n  );\n  const mutation4 = useMutateApi(\n    mutationItems[3]?.mutationConfig || defaultMutationConfig\n  );\n  const mutation5 = useMutateApi(\n    mutationItems[4]?.mutationConfig || defaultMutationConfig\n  );\n  const mutation6 = useMutateApi(\n    mutationItems[5]?.mutationConfig || defaultMutationConfig\n  );\n  const mutation7 = useMutateApi(\n    mutationItems[6]?.mutationConfig || defaultMutationConfig\n  );\n  const mutation8 = useMutateApi(\n    mutationItems[7]?.mutationConfig || defaultMutationConfig\n  );\n  const mutation9 = useMutateApi(\n    mutationItems[8]?.mutationConfig || defaultMutationConfig\n  );\n  const mutation10 = useMutateApi(\n    mutationItems[9]?.mutationConfig || defaultMutationConfig\n  );\n\n  // Store all mutation instances in an array for mapping\n  const mutationInstances = useMemo(\n    () => [\n      mutation1,\n      mutation2,\n      mutation3,\n      mutation4,\n      mutation5,\n      mutation6,\n      mutation7,\n      mutation8,\n      mutation9,\n      mutation10,\n    ],\n    [\n      mutation1,\n      mutation10,\n      mutation2,\n      mutation3,\n      mutation4,\n      mutation5,\n      mutation6,\n      mutation7,\n      mutation8,\n      mutation9,\n    ]\n  );\n\n  // Map mutations to their keys\n  const allMutation = useMemo(() => {\n    const result = {} as AllMutation<Q>;\n\n    mutationItems.forEach((item, index) => {\n      if (index < mutationInstances.length) {\n        result[item.key as keyof AllMutation<Q>] = mutationInstances[index];\n      } else {\n        console.warn(\n          `Maximum number of mutations (${mutationInstances.length}) exceeded. Mutation \"${item.key}\" was not created.`\n        );\n      }\n    });\n\n    return result;\n  }, [mutationItems, mutationInstances]);\n\n  // Return both queries and mutations\n  return { allMutation, allQuery: queriesResult };\n};\n"],"names":["endpoints","custom","setEndpoints","data","Object","assign","apiClient","axios","create","url","interceptors","request","use","config","baseURL","error","Promise","reject","response","Error","_a","message","_b","status","apiRequest","method","body","headers","converter","console","fetchRequest","undefined","validateApi","setValidateApi","validate","useQueryApi","props","enabled","endpoint","endpointArr","queryKey","customQueryFn","disableAuthControl","onDataChanged","options","auth","useAuthValue","key","path","baseUrl","fullEndpoint","filter","Boolean","join","queryResult","useQuery","queryFn","res","Authorization","token","isLogged","retry","retryDelay","useMultipleQuery","settings","results","useQueries","queries","useMemo","map","combine","useCallback","reduce","prev","result","index","keyToMap","isLoadingMapped","disableLoading","isLoading","isFetching","isPending","useMutateApi","queryKeyToInvalidate","customRequest","isTest","mutateOptions","notification","showNotification","useNotification","useMutation","mutationFn","onSuccess","variables","context","call","forEach","queryClient","invalidateQueries","exact","notificationProps","success","type","onError","_d","_c","_e","useApi","configs","queryItems","q","queryConfigs","item","queryConfig","queriesResult","mutationItems","mutationConfig","defaultMutationConfig","mutation1","mutation2","mutation3","mutation4","mutation5","mutation6","_f","mutation7","_g","mutation8","_h","mutation9","_j","mutation10","_k","mutationInstances","allMutation","length","warn","allQuery"],"mappings":"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"}